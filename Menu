import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;

/**
 * The top page of the GUI
 * @author Alli Allfrey
 */
public class Menu {
    private JFrame frame;
    private GamePackage pck = new GamePackage();
    
    /**
     * Constructor for initial menu
     */
    public Menu() { 
        runMainMenu();
        
    }
    
    public GamePackage getGamePackage() {
        return pck;
    }
    
    private void runMainMenu() {
        //Setup frame and divisons
        frame = new JFrame("The Ant Game");
        Container contentPane = frame.getContentPane();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        contentPane.setLayout(new GridLayout(3,5));
        frame.setMinimumSize(new Dimension(1000,150));
        frame.setResizable(false);
        
        JPanel blank1 = new JPanel(); JPanel blank2 = new JPanel();
        JPanel blank3 = new JPanel(); JPanel blank4 = new JPanel();
        JPanel blank5 = new JPanel(); JPanel blank6 = new JPanel();
        JPanel blank7 = new JPanel(); JPanel blank8 = new JPanel();
        JPanel blank9 = new JPanel(); JPanel blank10 = new JPanel();
        JPanel blank11 = new JPanel(); JPanel blank12 = new JPanel();
        JPanel blank13 = new JPanel(); JPanel blank14 = new JPanel();
        JPanel blank15 = new JPanel();
        
        blank1.setPreferredSize(new Dimension(200,50)); blank1.setMinimumSize(new Dimension(200,50));
        blank2.setPreferredSize(new Dimension(200,50)); blank2.setMinimumSize(new Dimension(200,50));
        blank3.setPreferredSize(new Dimension(200,50)); blank3.setMinimumSize(new Dimension(200,50));
        blank4.setPreferredSize(new Dimension(200,50)); blank4.setMinimumSize(new Dimension(200,50));
        blank5.setPreferredSize(new Dimension(200,50)); blank5.setMinimumSize(new Dimension(200,50));
        blank6.setPreferredSize(new Dimension(200,50)); blank6.setMinimumSize(new Dimension(200,50));
        blank7.setPreferredSize(new Dimension(200,50)); blank7.setMinimumSize(new Dimension(200,50));
        blank8.setPreferredSize(new Dimension(200,50)); blank8.setMinimumSize(new Dimension(200,50));
        blank9.setPreferredSize(new Dimension(200,50)); blank9.setMinimumSize(new Dimension(200,50));
        blank10.setPreferredSize(new Dimension(200,50)); blank10.setMinimumSize(new Dimension(200,50));
        blank11.setPreferredSize(new Dimension(200,50)); blank11.setMinimumSize(new Dimension(200,50));
        blank12.setPreferredSize(new Dimension(200,50)); blank12.setMinimumSize(new Dimension(200,50));
        blank13.setPreferredSize(new Dimension(200,50)); blank13.setMinimumSize(new Dimension(200,50));
        blank14.setPreferredSize(new Dimension(200,50)); blank14.setMinimumSize(new Dimension(200,50));
        blank15.setPreferredSize(new Dimension(200,50)); blank15.setMinimumSize(new Dimension(200,50));
        
        contentPane.add(blank1); contentPane.add(blank2); contentPane.add(blank3); 
        contentPane.add(blank4); contentPane.add(blank5); contentPane.add(blank6);
        
        // Add 1v1 button
        JButton oneButton = new JButton("Play 1 v 1"); 
        oneButton.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                System.out.println("1 v 1");
                frame.dispose();
                new UploadMenu(2);
            }           
        });
        oneButton.setPreferredSize(new Dimension(200,50));
        oneButton.setMinimumSize(new Dimension(200,50));
        contentPane.add(oneButton);
        
        contentPane.add(blank8);
        
        // Add tournament button
        JButton tButton = new JButton("Play a Tournament"); 
        tButton.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                System.out.println("Tournament Selected");
                try {
                    String players = JOptionPane.showInputDialog( "Number of Players:");
                    int noPlayers = Integer.parseInt(players);
                    if (noPlayers > 2) {
                        System.out.println("Creating tournament with " + noPlayers + " players!");
                        frame.dispose();
                        //for(int i = 0; i < noPlayers) {
                            new UploadMenu(noPlayers);
                        
                    }
                    else {
                        JOptionPane.showMessageDialog( null, "Please enter a number greater than 2", 
                                "Tournament Error", JOptionPane.PLAIN_MESSAGE );
                    }
                }
                catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog( null, "Please enter a number between 1 and 10", 
                            "Tournament Error", JOptionPane.PLAIN_MESSAGE );
                }
            }           
        });
        tButton.setPreferredSize(new Dimension(200,50));
        tButton.setMinimumSize(new Dimension(200,50));
        contentPane.add(tButton);
        
        contentPane.add(blank10); contentPane.add(blank11); contentPane.add(blank12); 
        contentPane.add(blank13); contentPane.add(blank14); contentPane.add(blank15);
        
        // Pack and display
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setLocation(dim.width/2-frame.getSize().width/2, dim.height/2-frame.getSize().height/2);
        frame.setSize(new Dimension(1000,150));
        frame.setVisible(true);
    }
    
    public static void main(String[] args) {
        Menu gui = new Menu();
    }

}

class UploadMenu {
    
    private ArrayList brainList = new ArrayList();
    private JFrame frame;
    private JTextField filename = new JTextField(), dir = new JTextField(), 
            countName = new JTextField(), countBox = new JTextField();
    private JButton browse = new JButton("Browse"), commit = new JButton("Commit"),
            cont = new JButton("Continue");
    private int brainCount = 0;

    public UploadMenu(int noPlayers) {
        final int no_Players = noPlayers;
        //Setup frame and divisons
        frame = new JFrame("The Ant Game: Upload Brains");
        Container contentPane = frame.getContentPane();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        contentPane.setLayout(new BorderLayout());
        frame.setMinimumSize(new Dimension(500,100));
        
        // Add upload panel
        JPanel upl = new JPanel();
        upl.setLayout(new FlowLayout());
        contentPane.add(upl, BorderLayout.EAST);
        
        // Add browse button 
        browse.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(brainCount != no_Players) {
                    JFileChooser c = new JFileChooser();
                    int rVal = c.showOpenDialog(frame);
                    if (rVal == JFileChooser.APPROVE_OPTION) {
                        String name = c.getSelectedFile().getName();
                        int i = name.lastIndexOf('.');
                        String extension = name.substring(i+1);
                        if(extension.equals("txt")) {
                            filename.setText(name);
                            dir.setText(c.getCurrentDirectory().toString());
                        }
                        else {
                            JOptionPane.showMessageDialog( null, "Please select an ant brain file.", 
                            "File Error", JOptionPane.PLAIN_MESSAGE );
                        }
                    }
                    if (rVal == JFileChooser.CANCEL_OPTION) {
                        filename.setText("Browse cancelled");
                        dir.setText("");
                    }
                }
                else {
                    JOptionPane.showMessageDialog( null, "You cannot upload any more ant brains", 
                            "Upload Error", JOptionPane.PLAIN_MESSAGE );
                }
            }
        });
        upl.add(browse);
        
        // Add file information fields
        filename.setEditable(false);
        dir.setEditable(false);
        JPanel p = new JPanel();
        p.setPreferredSize(new Dimension(300,50));
        p.setLayout(new GridLayout(2, 1));
        p.add(filename);
        p.add(dir);
        upl.add(p);
        
        // Add commit button
        commit.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                String directory = dir.getText();
                if(directory.isEmpty()) {
                    JOptionPane.showMessageDialog( null, "Please upload a file to commit", 
                            "Upload Error", JOptionPane.PLAIN_MESSAGE );
                }
                else {
                    System.out.println("Testing Brain" + brainCount);
                    // get the brain from the parser
                    // brainList.add(brain);
                    brainCount++;
                    countBox.setText(Integer.toString(brainCount));
                }
            }           
        });
        upl.add(commit);
        
        // Add the count fields
        JPanel countP = new JPanel();
        countP.setLayout(new FlowLayout());
        countName.setEditable(false);
        countName.setText("Number of Brains Uploaded:");
        countBox.setEditable(false);
        countBox.setText(Integer.toString(brainCount));
        countP.add(countName);
        countP.add(countBox);
        // Add continue button
        cont.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(brainCount == no_Players) {
                    frame.dispose();
                    new UploadMapMenu(no_Players);
                }
                else {
                    JOptionPane.showMessageDialog( null, "Please upload the correct number of ant brains: " + no_Players, 
                            "Upload Error", JOptionPane.PLAIN_MESSAGE );
                }
            }           
        });
        countP.add(cont);
        contentPane.add(countP, BorderLayout.SOUTH);

        // Pack and display
        frame.setSize(new Dimension(300,200));
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setLocation(dim.width/2-frame.getSize().width/2, dim.height/2-frame.getSize().height/2);
        frame.setVisible(true);
    }
    
    public ArrayList getBrainList() {
        return brainList;
    }
}

class UploadMapMenu {
    
    private ArrayList mapList = new ArrayList();
    private JFrame frame;
    private JTextField filename = new JTextField(), dir = new JTextField(), 
            countName = new JTextField(), countBox = new JTextField();
    private JButton browse = new JButton("Browse"), commit = new JButton("Commit"),
            cont = new JButton("Continue");
    private int mapCount = 0;

    public UploadMapMenu(int noPlayers) {
        final int mapsRequired = noPlayers;
        //Setup frame and divisons
        frame = new JFrame("The Ant Game: Upload Maps");
        Container contentPane = frame.getContentPane();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        contentPane.setLayout(new BorderLayout());
        frame.setMinimumSize(new Dimension(500,100));
        
        // Add upload panel
        JPanel upl = new JPanel();
        upl.setLayout(new FlowLayout());
        contentPane.add(upl, BorderLayout.EAST);
        
        // Add browse button 
        browse.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(mapCount != mapsRequired) {
                    JFileChooser c = new JFileChooser();
                    int rVal = c.showOpenDialog(frame);
                    if (rVal == JFileChooser.APPROVE_OPTION) {
                        String name = c.getSelectedFile().getName();
                        int i = name.lastIndexOf('.');
                        String extension = name.substring(i+1);
                        if(extension.equals("world")) {
                            filename.setText(name);
                            dir.setText(c.getCurrentDirectory().toString());
                        }
                        else {
                            JOptionPane.showMessageDialog( null, "Please select a world file.", 
                            "File Error", JOptionPane.PLAIN_MESSAGE );
                        }
                    }
                    if (rVal == JFileChooser.CANCEL_OPTION) {
                        filename.setText("Browse cancelled");
                        dir.setText("");
                    }
                }
                else {
                    JOptionPane.showMessageDialog( null, "You cannot upload any more worlds", 
                            "Upload Error", JOptionPane.PLAIN_MESSAGE );
                }
            }
        });
        upl.add(browse);
        
        // Add file information fields
        filename.setEditable(false);
        dir.setEditable(false);
        JPanel p = new JPanel();
        p.setPreferredSize(new Dimension(300,50));
        p.setLayout(new GridLayout(2, 1));
        p.add(filename);
        p.add(dir);
        upl.add(p);
        
        // Add commit button
        commit.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                String directory = dir.getText();
                if(directory.isEmpty()) {
                    JOptionPane.showMessageDialog( null, "Please upload a file to commit", 
                            "Upload Error", JOptionPane.PLAIN_MESSAGE );
                }
                else {
                    System.out.println("Testing Map " + mapCount);
                    // get the map from the parser
                    // mapList.add(brain);
                    mapCount++;
                    countBox.setText(Integer.toString(mapCount));
                }
            }           
        });
        upl.add(commit);
        
        // Add the count fields
        JPanel countP = new JPanel();
        countP.setLayout(new FlowLayout());
        countName.setEditable(false);
        countName.setText("Number of Maps Uploaded:");
        countBox.setEditable(false);
        countBox.setText(Integer.toString(mapCount));
        countP.add(countName);
        countP.add(countBox);
        // Add continue button
        cont.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(mapCount == mapsRequired) {
                    //start the game using the parameters
                    frame.dispose();
                    System.out.println("Call the getters from each menu");
                }
                else if(mapCount < mapsRequired) {
                    JOptionPane.showMessageDialog( null, "Not enough maps have been uploaded, "
                            + "to use the default map generator for the remaining maps required"
                            + "please press continue again.",
                            "Upload Error", JOptionPane.PLAIN_MESSAGE );
                }
                else {
                    JOptionPane.showMessageDialog( null, "You have uploaded too many maps", 
                            "Upload Error", JOptionPane.PLAIN_MESSAGE );
                }
            }           
        });
        countP.add(cont);
        contentPane.add(countP, BorderLayout.SOUTH);

        // Pack and display
        frame.setSize(new Dimension(300,200));
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setLocation(dim.width/2-frame.getSize().width/2, dim.height/2-frame.getSize().height/2);
        frame.setVisible(true);
    }
    
    public ArrayList getMapList() {
        return mapList;
    }
}

class GamePackage {
    ArrayList brainList = new ArrayList();
    ArrayList worldList = new ArrayList();
    
//    public void addBrain(AntBrain brain) {
//        brainList.add(brain);
//    }
//    
//    public void addWorld(World world) {
//        worldList.add(world);
//    }
}
